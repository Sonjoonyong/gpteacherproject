<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.sooaz.gpt.domain.community.CommunityPostMapper">

    <insert id="save" parameterType="CommunityPost">
        <selectKey keyProperty="id" resultType="long" order="BEFORE">
            SELECT COMMUNITY_POST_ID_SEQ.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO community_post (
            id,
            user_id,
            <if test="sentenceId != null">
            sentence_id,
            </if>
            community_post_title,
            community_post_content,
            community_post_category
        )
        VALUES (
            #{id},
            #{userId},
            <if test="sentenceId != null">
                #{sentenceId},
            </if>
            #{communityPostTitle},
            #{communityPostContent},
            #{communityPostCategory}
        )
    </insert>

    <select id="findById" parameterType="long" resultType="CommunityPost">
        SELECT * FROM community_post WHERE id = #{communityPostId}
    </select>

    <select id="findByIdForView" resultType="CommunityPostViewDto">
        SELECT P.id    as community_post_id,
               U.id    as user_Id,
               U.user_nickname,
               sentence_id,
               community_post_category,
               community_post_title,
               community_post_content,
               community_post_hit,
               community_post_writedate,
               community_post_like,
               (SELECT count(*)
                FROM COMMUNITY_REPLY
                WHERE community_post_id = P.id)
                   AS community_post_reply_count,
               CASE
                   WHEN exists(select *
                               from BOOKMARK
                               where COMMUNITY_POST_ID = #{communityPostId}
                                 and USER_ID = #{userId})
                       THEN '1'
                   ELSE '0'
                   END AS isBookmarked,
               CASE
                   WHEN exists(select *
                               from LIKES
                               where COMMUNITY_POST_ID = #{communityPostId}
                                 and USER_ID = #{userId})
                       THEN '1'
                   ELSE '0'
                   END AS isLiked
        FROM community_post P
                 JOIN users U
                      ON P.user_id = U.id
        WHERE P.id = #{communityPostId}
    </select>

    <select id="findAll" resultType="CommunityPostListDto">
        SELECT
            U.user_nickname,
            P.*,
            (SELECT count(*)
            FROM COMMUNITY_REPLY
            WHERE community_post_id = P.id)
            AS community_post_reply_count
        FROM community_post P
        JOIN users U
        ON U.id = P.user_id
        <if test="search != null">
            WHERE LOWER(community_post_title) LIKE '%' || LOWER(#{search}) || '%'
        </if>
        ORDER BY community_post_writedate DESC
    </select>

    <select id="count" resultType="long">
        SELECT count(0) FROM community_post
    </select>

    <select id="findByUserId" parameterType="long" resultType="CommunityPost">
        select * from community_post where user_id = #{userId} order by id desc
    </select>

    <select id="findBookmarksByUserId" parameterType="long" resultType="CommunityPost">
        select * from community_post where id in (select community_post_id from bookmark where user_id = #{userId}) order by id desc
    </select>


    <update id="update" parameterType="com.sooaz.gpt.domain.community.CommunityPostUpdateDto">
        UPDATE community_post
        <set>
            <if test="communityPostTitle != null">
                community_post_title = #{communityPostTitle},
            </if>
            <if test="communityPostContent != null">
                community_post_content = #{communityPostContent},
            </if>
            <if test="communityPostHit != null">
                community_post_hit = #{communityPostHit},
            </if>
            <if test="communityPostLike != null">
                community_post_like = #{communityPostLike},
            </if>
            <if test="communityPostLikeChange != null">
                community_post_like = community_post_like + #{communityPostLikeChange},
            </if>
            <if test="communityPostCategory != null">
                community_post_category = #{communityPostCategory},
            </if>
            <if test="sentenceId != null">
                sentence_id = #{sentenceId},
            </if>
            <if test="sentenceId == null">
                sentence_id = NULL
            </if>
        </set>
        WHERE id = #{communityPostId}
    </update>

    <delete id="delete" parameterType="long">
        delete from COMMUNITY_POST where id = #{communityPostId}
    </delete>

</mapper>
